[{"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa2\\maidentiedot\\maidentiedotallsteps\\src\\index.js":"1","C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa2\\maidentiedot\\maidentiedotallsteps\\src\\App.js":"2"},{"size":181,"mtime":1608902859245,"results":"3","hashOfConfig":"4"},{"size":6173,"mtime":1609251595886,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"oipegp",{"filePath":"9","messages":"10","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa2\\maidentiedot\\maidentiedotallsteps\\src\\index.js",[],["12","13"],"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa2\\maidentiedot\\maidentiedotallsteps\\src\\App.js",["14","15","16","17","18","19","20","21","22","23"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\n//Maiden renderöimiseen webbisivulle\nconst RenderCountries = ({ vainFiltteroidytMaat }) => {\n\n  //Tätä ei käytetä tässä ohjelmassa...mahdollista jatkokehitystä varten\n  const [filteroidytMaat, setFilteroidytMaat] = useState(vainFiltteroidytMaat)\n  //Tällä muuttujalla pidetään yllä klikattua maata\n  //Alussa tyhjä, koska halutaan napilla valita mitä maata näytetään\n  const [klikattuMaa, setClikattuMaa] = useState('')\n\n  const [currentWeather, setCurrentWeather] = useState([])\n\n  //API Key ja annetaan sovelluksen käynnistyksen yhteydessä\n  //Ympäristömuuttujana \n  //set \"REACT_APP_API_KEY=10169fa9810f9dcd8d842f36551a9c3b\" && npm start\n  const api_key = process.env.REACT_APP_API_KEY\n\n  const [url, setUrl] = useState('')\n\n\n  //Ottaa talteen maan, jota klikattu\n  const countryClick = ({ country }) => {\n    //Otetaan talteen klikattu maa\n    setClikattuMaa(country)\n    //Kokeilua varten\n    setFilteroidytMaat(country)\n    setUrl('http://api.weatherstack.com/current?access_key=' + `${api_key}` + '&query=' + `${country.capital}`)\n  }\n\n  //Palautetaan maiden nimet buttoneilla ja näytetään sen maan tiedot\n  //jonka buttonia painettu\n  return (\n    <div>\n      <>\n        {vainFiltteroidytMaat.map(country => (\n          <Button key={country.nativeName} country={country} onClick={() => countryClick({ country })} />\n        ))\n        }\n      </>\n      <div>\n        <>\n          <RenderCountry url={url} key={klikattuMaa.nativeName} countries={klikattuMaa} weather={currentWeather} />\n        </>\n      </div>\n    </div>\n  )\n}\n//Renderöidään Button ja maan nimi buttonin vasemmalle puolelle\nconst Button = ({ country, onClick }) => {\n  return (\n    <div>\n      <br></br>\n      <>{country.name} </>\n      <button onClick={onClick}>Show</button>\n    </div>\n  )\n}\n\n//Renderöidään kieli\nconst RenderLanguage = ({ languages }) => {\n  return (\n    <div>\n      <li>\n        {languages}\n      </li>\n    </div>\n  )\n}\n\n//Säätiedotuksen renderöinti\nconst WeatherRender = ({ url }) => {\n\n  const [currentWeather, setCurrentWeather] = useState([])\n\n  const res = axios.get(url)\n  const posts = res.data\n\n  const [weather, setWeather] = useState([useEffect(() => {\n    axios\n      .get(url)\n      .then(response => {\n        console.log('WeatherRender promise fulfilled')\n        setWeather(weather.concat(response.data))\n        console.log('Vastauksena tullutdata', response.data)\n      })\n  }, [])])\n\n  console.log('WeatherRender sää', weather[1])\n\n\n  return (\n    <div>\n      <h2>{weather.length}</h2>\n    </div>\n  )\n\n}\n//Yhden maan renderöimiseen\nconst RenderCountry = ({ countries, weather, url }) => {\n\n  console.log('RenderCountryn url', url)\n\n\n\n  //If lause on tarkoitettu tsekkamaan, onko maan vieressä painettu buttonia\n  //Tätä if lausetta ei tarvita, kun filteröinnin tuloksena yksi maa FilterCountries\n  //Komponentista\n  if (countries !== '' && url !== '') {\n    console.log('RenderCountryn weather', weather.location)\n    const flagUrl = countries.flag\n    return (\n      <div>\n        <h1>{countries.name}</h1>\n        <p>Capital: {countries.capital}</p>\n        <p>Population: {countries.population}</p>\n        <h2>Languages</h2>\n        <>\n          {countries.languages.map(value => (<RenderLanguage languages={value.name} />))}\n        </>\n        <img src={flagUrl} width=\"193\" height=\"130\"></img>\n        <div>\n          <h1>Tähän sää</h1>\n          <WeatherRender url={url} />\n        </div>\n      </div>\n    )\n  }\n  //Jos maan vieressä olevaa buttonia ei ole painettu, lisätään tyhjää\n  return (\n    <></>\n  )\n}\n\n//Maiden näyttämiseksi filteröinti\n//Key:ksi uniikki arvo\nconst FilterCountries = ({ countries, howToFilter }) => {\n\n  //Otetaan muuttujaan talten filteröidyt maat\n  const filteroidytMaat = countries.filter(country => country.name.toLocaleLowerCase().includes(`${howToFilter}`))\n  //If lauseita varten lasketaan filteröityjen maiden määrä\n  const count = filteroidytMaat.length\n\n  //Jos filteröityy yli kymmenen maata, pyydetään tarkentamaan hakua\n  if (count > 10) {\n    return (\n      <div>Too many matches, specify another filter</div>\n    )\n  }\n\n  //Jos alle kymmenen tai enemmän kuin yksi, lähetetään renderöitäväksi\n  //maiden listaukseen\n  if (count <= 10 && count > 1) {\n    return (\n      <>\n        <RenderCountries vainFiltteroidytMaat={filteroidytMaat} />\n      </>\n    )\n  }\n\n  return (\n    <>\n      { countries.filter(country => country.name.toLocaleLowerCase().includes(`${howToFilter}`)).map(filteredCountries => (\n        <RenderCountry key={filteredCountries.nativeName} countries={filteredCountries} />\n      ))\n      }\n    </>\n  )\n\n}\n\nconst App = () => {\n  //Taulukko maille\n  const [countries, setCountries] = useState([])\n  //Muuttujia jotka toimivat dynaamisesti change\n  const [howToFilter, setHowToFilter] = useState('')\n\n  //Tällä haetaan https://restcountries.eu sivulta kaikki maat\n  //EI ole talletettu db.json fileen\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('promise fulfilled')\n        setCountries(response.data)\n      })\n  }, [])\n  console.log('Maalistan koko', countries.length, 'countries')\n\n\n\n  //Tapahtumankäsittelijää handleNameChange kutsutaan aina kun \n  //syötekomponentissa tapahtuu jotain\n  //Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion event\n  const handleFilterChange = (event) => {\n    //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\n    //event.target.value viittaa inputin syötekentän arvoon\n    console.log(event.target.value.toLowerCase())\n    //Muutetaan syöte lower caseksi\n    setHowToFilter(event.target.value.toLowerCase())\n  }\n\n\n\n  return (\n    <div>\n      <h2>Filter</h2>\n      <div>\n        filter shown with: <input value={howToFilter} onChange={handleFilterChange} />\n      </div>\n      <>\n        <FilterCountries countries={countries} howToFilter={howToFilter} />\n      </>\n           ...<div>debugFilterField: {howToFilter}</div>\n    </div>\n  )\n}\nexport default App\n\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":9,"column":10,"nodeType":"30","messageId":"31","endLine":9,"endColumn":25},{"ruleId":"28","severity":1,"message":"32","line":14,"column":26,"nodeType":"30","messageId":"31","endLine":14,"endColumn":43},{"ruleId":"33","severity":1,"message":"34","line":30,"column":62,"nodeType":"35","messageId":"36","endLine":30,"endColumn":63},{"ruleId":"33","severity":1,"message":"34","line":30,"column":77,"nodeType":"35","messageId":"36","endLine":30,"endColumn":78},{"ruleId":"33","severity":1,"message":"34","line":30,"column":89,"nodeType":"35","messageId":"36","endLine":30,"endColumn":90},{"ruleId":"28","severity":1,"message":"37","line":76,"column":10,"nodeType":"30","messageId":"31","endLine":76,"endColumn":24},{"ruleId":"28","severity":1,"message":"32","line":76,"column":26,"nodeType":"30","messageId":"31","endLine":76,"endColumn":43},{"ruleId":"28","severity":1,"message":"38","line":79,"column":9,"nodeType":"30","messageId":"31","endLine":79,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":89,"column":6,"nodeType":"41","endLine":89,"endColumn":8,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":123,"column":9,"nodeType":"45","endLine":123,"endColumn":53},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'filteroidytMaat' is assigned a value but never used.","Identifier","unusedVar","'setCurrentWeather' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'currentWeather' is assigned a value but never used.","'posts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'url' and 'weather'. Either include them or remove the dependency array. You can also do a functional update 'setWeather(w => ...)' if you only need 'weather' in the 'setWeather' call.","ArrayExpression",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [url, weather]",{"range":"51","text":"52"},[2471,2473],"[url, weather]"]