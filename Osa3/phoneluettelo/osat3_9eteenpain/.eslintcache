[{"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\index.js":"1","C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\App.js":"2","C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\services\\persons.js":"3"},{"size":149,"mtime":1610719433811,"results":"4","hashOfConfig":"5"},{"size":12490,"mtime":1611672465355,"results":"6","hashOfConfig":"5"},{"size":1151,"mtime":1611758013940,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"q00jgt",{"filePath":"11","messages":"12","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\index.js",[],["16","17"],"C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28"],"import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\n\r\n//Henkilön filteröimiseen\r\nconst Filter = ({ value, onChange }) => {\r\n\r\n    return (\r\n        <div>\r\n            filter shown with: <input value={value} onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Henkilön renderöimiseen webbisivulle delete napilla\r\nconst RenderPersons = ({ person, onClick }) => {\r\n    return (\r\n        <div>\r\n            <RenderPerson person={person} onClick={onClick} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Yksittäisen henkilön renderöiminen delete napilla\r\nconst RenderPerson = ({ person, onClick }) => {\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <>{person.name} {person.number}</>\r\n            <button key={person.id} onClick={onClick}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Lomake Person objectin luomiseen phonebookiin\r\nconst PersonForm = ({ valueName, onChangeName, valueNumber, onChangeNumber, onSubmit }) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    Name: <input value={valueName} onChange={onChangeName} />\r\n                </div>\r\n                <div>\r\n                    Number: <input value={valueNumber} onChange={onChangeNumber} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön poistamiseen\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön lisämiseen\r\nconst NotificationAdded = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"added\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    //Person objectien tilan ylläpitämiseen\r\n    const [persons, setPersons] = useState([])\r\n    //Muuttujia/tilat jotka toimivat dynaamisesti change\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [howToFilter, setHowToFilter] = useState('')\r\n    //Notificaatioille tilat\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [addedMessage, setAddedMessage] = useState(null)\r\n\r\n    //Tällä haetaan data db.json filestä ja/tai Mongosta asetetaan persons\r\n    //taulukkoon. Tietokantakysely viety omaan moduuliin src/services/persons.js\r\n    //Tässä käytetään personServiceä, joka importattu\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    //Uuden nimen lisäys ja phonenumeron päivitys\r\n    const addName = (event) => {\r\n        //Estää lomakkeen lähetyksen oletusarvoisen toiminnan, \r\n        //joka aiheuttaisi mm. sivun uudelleenlatautumisen. \r\n        event.preventDefault()\r\n\r\n        //Tällä voitaisiin myös tsekata, onko nimi jo olemassa kannassa\r\n        //Palauttaa joko True tai False\r\n        const personName = persons.find(person => {\r\n            console.log(person.name, person.id, typeof person.name, newName, typeof newName, person.name === newName)\r\n            return person.name === newName\r\n        })\r\n        //Jos nimi jo kannassa, niin otetaan indeksinumero talteen\r\n        //Jos ei ole, arvoksi tulee -1\r\n        const indexNumber = persons.findIndex(person => person.name === newName)\r\n        console.log('löydetyn indeksinumero', indexNumber)\r\n\r\n        //Jos indexinumero ei ole -1, -1 tarkoittaisi että ei ole kannassa\r\n        if (indexNumber !== -1) {\r\n            //Confirmoitava alertti, jolla voidaan päättää päivitetäänkö numero vai ei\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                //Luodaan uusi person object\r\n                //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n                const updatePersonObject = {\r\n                    name: newName,\r\n                    number: newNumber,\r\n                }\r\n                //Viedään uusi person object db.json fileen eli tietokantaan sama koodi toimmii myös Mongoon\r\n                //Update toiminto moduulissa src/services/persons.js\r\n                //Tässä käytetään personServiceä, joka importattu\r\n                personService\r\n                    .updatePerson(persons[indexNumber].id, updatePersonObject)\r\n                    .then(returnedPerson => {\r\n                        console.log('MIKÄ ARVO TULEE TAKAISIN', returnedPerson.id)\r\n                        //Päivitetään persons taulukkoa niin ettei vanhaa enää sieltä löydy ja lisätään\r\n                        //päivitetty person\r\n                        setPersons(persons.map(person => person.id !== persons[indexNumber].id ? person : returnedPerson))\r\n\r\n                        //Tyhjätään setNewName ja number kentät\r\n                        setNewName('')\r\n                        setNewNumber('')\r\n                        console.log('Success!')\r\n                        console.log('TÄMÄ ID PÄIVITETÄÄN', persons[indexNumber].id)\r\n                        console.log('VAIHTUIKO ID VAI ONKO SAMA', returnedPerson.id)\r\n                        console.log('TÄMÄ NUMERO PÄIVITETÄÄN', persons[indexNumber].number)\r\n                        console.log('TÄKSI NUMEROKSI', returnedPerson.number)\r\n                        //Sealimeen 5sec viesti, jos päivitys tietokantaan onnistui\r\n                        setAddedMessage('Person ' + `${updatePersonObject.name}` + ' succefully changed')\r\n                        setTimeout(() => {\r\n                            setAddedMessage(null)\r\n                        }, 5000)\r\n                    })\r\n\r\n                    //Selaimeen 5sec viesti, jos päivitys tietokantaan ei onnistunut\r\n                    //Esim. poistaa toisella selaimella henkilön ja samaan aikaan yrittää päivittää\r\n                    //Juuri poistetun henkilön tiedot\r\n                    .catch(error => {\r\n                        setErrorMessage('Information of ' + `${updatePersonObject.name}` + ' has already been removed from server')\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null)\r\n                        }, 5000)\r\n                        console.log('Person update failed')\r\n                    })\r\n            }\r\n        }\r\n\r\n\r\n        //Jos henkilöä ei ole kannassa, niin luodaan uusi Person\r\n        if (indexNumber === -1) {\r\n            console.log('Uuden luominen, koska ei ollut kannassa')\r\n\r\n            //Luodaan uusi person object\r\n            //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n            const newPersonObject = {\r\n                name: newName,\r\n                number: newNumber,\r\n            }\r\n            //Viedään uusi person object db.json fileen eli tietokantaan sama koodi toimmii myös Mongoon\r\n            //Post toiminto moduuliissa src/services/persons.js\r\n            //Tässä käytetään personServiceä, joka imporattu\r\n            let onkoErroria = false\r\n            personService\r\n                .create(newPersonObject)\r\n                .then(returnedPerson => {\r\n                    setPersons(persons.concat(returnedPerson))\r\n                    //Tyhjätään setNewName ja number kentät\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    console.log('addName function', returnedPerson)\r\n                })\r\n                //Otetaan Mongon validaattorin virhe talteen ja tulosteaan frontendiin\r\n                .catch(error => {\r\n                    if (error.name === 'Error') {\r\n                        //Jos päätyy virheeseen, niin muutetaan onkoErroria muuttujaa\r\n                        onkoErroria = true\r\n                        // pääset käsiksi palvelimen palauttamaan virheilmoitusolioon näin\r\n                        //HUOM! Lopussa vielä \".error\", koska palvelin palauttaa error olion\r\n                        setErrorMessage(error.response.data.error)\r\n                        //Selaimeen voi palauttaa olion ja siksi tässä jätetty lopusta \".error\" pois\r\n                        console.log('VIRHEVIESTI', error.response.data)\r\n                        console.log('VIRHEVIESTI NAME', error.name)\r\n                        console.log('1. ONKO ERRORIA TRUE VAI FALSE', onkoErroria)\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null)\r\n                        }, 5000)\r\n                    }\r\n                })\r\n            console.log('2. ONKO ERRORIA TRUE VAI FALSE', onkoErroria)\r\n            //Jos ei päädy validation erroriin annetaan successfull viesti\r\n            if (onkoErroria===false) {\r\n                //Viesti onnistuneesta lisäyksestä\r\n                setAddedMessage('Person ' + `${newPersonObject.name}` + ' succesfully added')\r\n                console.log(newPersonObject.name)\r\n                //Lisäyksen viestille timeout eli kauanko näkyvillä\r\n                //Ja asetetaan arvoksi sen jälkeen null ettei viestiä näy 5sec jälkeen\r\n                setTimeout(() => {\r\n                    setAddedMessage(null)\r\n                }, 5000)\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    //Tapahtumankäsittelijää handleNameChange kutsutaan aina kun \r\n    //syötekomponentissa tapahtuu jotain\r\n    //Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion event\r\n    const handleNameChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n    const handleNumberChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n    const handleFilterChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value.toLowerCase())\r\n        //Muutetaan syöte lower caseksi\r\n        setHowToFilter(event.target.value.toLowerCase())\r\n    }\r\n\r\n    //Henkilön poistaminen\r\n    const removePerson = ({ filteredPerson }) => {\r\n        if (window.confirm(\"Delete \" + `${filteredPerson.name}` + \"?\")) {\r\n            personService\r\n                .removePerson(filteredPerson.id)\r\n            console.log('removePerson', filteredPerson.id)\r\n            //Päivitetään lista persons eli poistetaan listalata ne jotka poistetaan myös\r\n            //Tietokannasta\r\n            setPersons(persons.filter(item => item.name !== filteredPerson.name))\r\n            //Asetetaan viesti onnistuneesta poistosta\r\n            setErrorMessage('Person ' + `${filteredPerson.name}` + ' succesfully removed')\r\n            //Poiston viestille timeout eli kauanko näkyvillä\r\n            //Ja asetetaan arvoksi sen jälkeen null\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Filter value={howToFilter} onChange={handleFilterChange} />\r\n\r\n            <h2>Add a new</h2>\r\n            <Notification message={errorMessage} />\r\n            <NotificationAdded message={addedMessage} />\r\n            <PersonForm valueName={newName} onChangeName={handleNameChange} valueNumber={newNumber} onChangeNumber={handleNumberChange} onSubmit={addName} />\r\n\r\n            <h2>Numbers</h2>\r\n            <>\r\n                {persons.filter(person => person.name.toLocaleLowerCase().includes(`${howToFilter}`)).map(filteredPerson => (\r\n                    <RenderPersons key={filteredPerson.id} person={filteredPerson} onClick={() => removePerson({ filteredPerson })} />\r\n                ))\r\n                }\r\n            </>\r\n\r\n      ...<div>debugNameField: {newName}</div>\r\n      ...<div>debugFilterField: {howToFilter}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default App","C:\\Users\\astur\\Documents\\Fullstack\\Harjoitukset\\Osa3\\phoneluettelo\\osat3_9eteenpain\\src\\services\\persons.js",["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":113,"column":15,"nodeType":"37","messageId":"38","endLine":113,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":152,"column":51,"nodeType":"41","messageId":"42","endLine":152,"endColumn":52},{"ruleId":"39","severity":1,"message":"40","line":152,"column":82,"nodeType":"41","messageId":"42","endLine":152,"endColumn":83},{"ruleId":"39","severity":1,"message":"40","line":162,"column":59,"nodeType":"41","messageId":"42","endLine":162,"endColumn":60},{"ruleId":"39","severity":1,"message":"40","line":162,"column":90,"nodeType":"41","messageId":"42","endLine":162,"endColumn":91},{"ruleId":"39","severity":1,"message":"40","line":216,"column":43,"nodeType":"41","messageId":"42","endLine":216,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":216,"column":71,"nodeType":"41","messageId":"42","endLine":216,"endColumn":72},{"ruleId":"39","severity":1,"message":"40","line":254,"column":38,"nodeType":"41","messageId":"42","endLine":254,"endColumn":39},{"ruleId":"39","severity":1,"message":"40","line":254,"column":65,"nodeType":"41","messageId":"42","endLine":254,"endColumn":66},{"ruleId":"39","severity":1,"message":"40","line":262,"column":39,"nodeType":"41","messageId":"42","endLine":262,"endColumn":40},{"ruleId":"39","severity":1,"message":"40","line":262,"column":66,"nodeType":"41","messageId":"42","endLine":262,"endColumn":67},{"ruleId":"35","severity":1,"message":"43","line":22,"column":11,"nodeType":"37","messageId":"38","endLine":22,"endColumn":18},{"ruleId":"44","severity":1,"message":"45","line":33,"column":1,"nodeType":"46","endLine":35,"endColumn":2},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'personName' is assigned a value but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'request' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]